import{_ as s,c as a,o as i,a5 as n}from"./chunks/framework.CByBVyi2.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"timeline/issue-78.md","filePath":"timeline/issue-78.md","lastUpdated":1752140921000}'),e={name:"timeline/issue-78.md"},t=n(`<h3 id="git-worktree是什么" tabindex="-1">git worktree是什么？ <a class="header-anchor" href="#git-worktree是什么" aria-label="Permalink to &quot;git worktree是什么？&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">原文地址</p><p><a href="https://github.com/jynba/jynba.github.io/issues/78" target="_blank" rel="noreferrer">git worktree是什么？如何用它减少绝大部分的git stash的使用 | GitHub</a></p></div><p>git worktree（工作树）是 Git 的一个功能，它允许你从同一个 Git 仓库中同时检出多个工作目录。主要作用包括：</p><ol><li><p>同时处理多个分支：无需频繁切换分支即可在不同分支上工作</p></li><li><p>并行开发：可以在不同的工作树中同时进行不同的开发任务</p></li><li><p>长期运行分支：为长期运行的分支（如预览分支）保持独立的工作区</p></li><li><p>构建隔离：在不同工作树中并行构建不同版本的项目</p></li><li><p>避免 stash：减少使用 git stash 来保存临时更改的需要； 使用它切换分支时无需stash本地暂存区内容；而是创建新的工作区切换</p></li></ol><h3 id="git-worktree用法" tabindex="-1">git worktree用法 <a class="header-anchor" href="#git-worktree用法" aria-label="Permalink to &quot;git worktree用法&quot;">​</a></h3><ul><li>实际应用场景示例 场景：你正在 master 分支上修复一个紧急 bug，同时需要开发一个新功能。</li></ul><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在主工作区修复 bug...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 为新功能创建工作树</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> worktree</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature-xyz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (直接创建应该目录文件为feature-xyz，且切分支到feature-xyz)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature-xyz</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 开发新功能...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 完成后移除工作树</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> worktree</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remove</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./feature-xyz</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 继续在主工作区修复 bug</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li>对比下面 git stash 的操作</li></ul><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 正在feature分支工作，需要紧急修复master分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stash</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 修复问题...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pop</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li>git worktree 更适合长期的多任务开发场景；而 git stash 则更适合临时性的上下文切换 如果不希望git stash 和 git checkout 的操作时，可以考虑用 git worktree</li></ul>`,11),l=[t];function p(r,h,k,c,d,o){return i(),a("div",null,l)}const b=s(e,[["render",p]]);export{u as __pageData,b as default};

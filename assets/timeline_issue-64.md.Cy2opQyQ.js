import{_ as s,c as e,o as i,a5 as a}from"./chunks/framework.CByBVyi2.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"timeline/issue-64.md","filePath":"timeline/issue-64.md","lastUpdated":1744189267000}'),t={name:"timeline/issue-64.md"},l=a('<blockquote><blockquote><p>最近做了一个表格左右滚动查看列的需求，发现在IOS中滚动的时候会出现一种非常Q弹的效果，查了一下发现，原来在IOS系统中存在回弹机制，也叫橡皮筋效果，即在往边界滑动的时候，可以划出边界，然后回弹回来，那么如何在微信小程序中禁用该效果呢？</p></blockquote></blockquote><div class="tip custom-block"><p class="custom-block-title">原文地址</p><p><a href="https://github.com/jynba/jynba.github.io/issues/64" target="_blank" rel="noreferrer">微信小程序中IOS的回弹机制导致页面滑动 | GitHub</a></p></div><h3 id="最终解决方案" tabindex="-1">最终解决方案 <a class="header-anchor" href="#最终解决方案" aria-label="Permalink to &quot;最终解决方案&quot;">​</a></h3><p>在<a href="https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html" target="_blank" rel="noreferrer">微信开放文档</a> <code>中针对 </code>scroll-view<code>存在两个属性，</code>enhanced<code>和</code>bounces`</p><p>enhanced | boolean | false | 否 | 启用 scroll-view 增强特性，启用后可通过 ScrollViewContext 操作 scroll-view bounces | boolean | true | 否 | iOS 下 scroll-view 边界弹性控制 (同时开启 enhanced 属性后生效)</p><p>可以进行如下设置：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scroll-view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> scroll-y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bindscrolltolower</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nextPage&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> enhanced</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bounces</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;false&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>但在实际开发时我发现这样还是无法解决问题，通过查找资料我发现，需要控制 当<code>scroll-view</code>存在数据的时候才渲染，这样才能控制</li></ul>',8),n=[l];function o(r,h,p,c,d,k){return i(),e("div",null,n)}const g=s(t,[["render",o]]);export{b as __pageData,g as default};

import{_ as t,c as e,o as r,a5 as i}from"./chunks/framework.CByBVyi2.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"timeline/issue-13.md","filePath":"timeline/issue-13.md","lastUpdated":1744193097000}'),a={name:"timeline/issue-13.md"},d=i('<h2 id="typescript基础类型" tabindex="-1">TypeScript基础类型 <a class="header-anchor" href="#typescript基础类型" aria-label="Permalink to &quot;TypeScript基础类型&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">原文地址</p><p><a href="https://github.com/jynba/jynba.github.io/issues/13" target="_blank" rel="noreferrer">TypeScript基础类型和内置类型 | GitHub</a></p></div><p>一、简单基础类型</p><html><body><table tabindex="0"><thead><tr><th>JavaScript原始基础类型</th><th>TypeScript类型</th></tr></thead><tbody><tr><td>number</td><td>number</td></tr><tr><td>boolean</td><td>boolean</td></tr><tr><td>string</td><td>string</td></tr><tr><td>null</td><td>null</td></tr><tr><td>undefined</td><td>undefined</td></tr><tr><td>symbol</td><td>symbol</td></tr><tr><td>bigInt</td><td>bigInt</td></tr></tbody></table></body></html><p>二、复杂基础类型 元组、枚举、Any、void、never、unknown</p><p>【详细参考】(<a href="https://juejin.cn/post/6997576373728444446" target="_blank" rel="noreferrer">https://juejin.cn/post/6997576373728444446</a>)</p><h2 id="typescript内置类型一览" tabindex="-1">TypeScript内置类型一览 <a class="header-anchor" href="#typescript内置类型一览" aria-label="Permalink to &quot;TypeScript内置类型一览&quot;">​</a></h2><p>让我们来了解一下TypeScript官方的内置类型，让你的开发效率再上一层楼</p><ul><li>Pick 从类型中选择几个属性，形成新的类型</li><li>Omit 去除类型中几个属性，形成新的类型</li><li>Partical 让传入类型中的所有属性变成都是可选的</li><li>Required 让传入类型中的所有属性变成都是必填的</li><li>Record 构建一个类型，这个类型用来描述一个对象，这个对象的属性都具有相同的类型 <em>Record应该是日常使用频率较高的内置类型了，主要用来描述对象，一般建议是不用Object来描述对象，而是用Record代替，Record&lt;string, any&gt;几乎可以说是万金油了</em></li><li>Exclude 针对联合类型，取两个联合类型中不同的</li><li>Extract 针对联合类型，取两个联合类型中相同的</li><li>Parameters 获取传入函数的参数组成类型 ... 参考：<a href="https://juejin.cn/post/7040300769072906277" target="_blank" rel="noreferrer">https://juejin.cn/post/7040300769072906277</a></li></ul>',9),l=[d];function n(s,o,p,c,h,u){return r(),e("div",null,l)}const m=t(a,[["render",n]]);export{_ as __pageData,m as default};

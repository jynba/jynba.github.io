import{_ as e,c as a,o as t,a5 as l}from"./chunks/framework.CByBVyi2.js";const T=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"timeline/issue-12.md","filePath":"timeline/issue-12.md","lastUpdated":1753089386000}'),i={name:"timeline/issue-12.md"},r=l('<h2 id="treeshaking是什么" tabindex="-1">TreeShaking是什么？ <a class="header-anchor" href="#treeshaking是什么" aria-label="Permalink to &quot;TreeShaking是什么？&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">原文地址</p><p><a href="https://github.com/jynba/jynba.github.io/issues/12" target="_blank" rel="noreferrer">TreeShaking是什么及其原理 | GitHub</a></p></div><ul><li>Tree Shaking 指基于 ES Module 进行静态分析，通过 AST 将用不到的函数进行移除，从而减小打包体积。</li><li>当使用语法 import * 时，Tree Shaking 依然生效。 可在 <a href="https://rollupjs.org/repl/" target="_blank" rel="noreferrer">https://rollupjs.org/repl/</a> 中演示 项目优化：为了减小生产环境体积，我们可以使用一些支持 ES 的 package，比如使用 lodash-es 替代 lodash 可以在 <a href="https://npm.devtool.tech" target="_blank" rel="noreferrer">https://npm.devtool.tech</a> 中查看某个库是否支持 Tree Shaking</li></ul><h2 id="ast是什么" tabindex="-1">AST是什么？ <a class="header-anchor" href="#ast是什么" aria-label="Permalink to &quot;AST是什么？&quot;">​</a></h2><p>AST 是 Abstract Syntax Tree 的简称，是前端工程化绕不过的一个名词。它涉及到工程化诸多环节的应用，比如:</p><ul><li>如何将 Typescript 转化为 Javascript (typescript)</li><li>如何将 SASS/LESS 转化为 CSS (sass/less)</li><li>如何将 ES6+ 转化为 ES5 (babel)</li><li>如何将 Javascript 代码进行格式化 (eslint/prettier)</li><li>如何识别 React 项目中的 JSX (babel)</li><li>GraphQL、MDX、Vue SFC 等等</li></ul><p>而在语言转换的过程中，实质上就是对其 AST 的操作，核心步骤就是 AST 三步走</p><ol><li>Code -&gt; AST (Parse)</li><li>AST -&gt; AST (Transform)</li><li>AST -&gt; Code (Generate)</li></ol><p>在 AST Explorer（ <a href="https://astexplorer.net/" target="_blank" rel="noreferrer">https://astexplorer.net/</a> ） 中，列举了诸多语言的解析器(Parser)，及转化器(Transformer)</p><h4 id="词法分析-lexical-analysis" tabindex="-1">词法分析 (Lexical Analysis) <a class="header-anchor" href="#词法分析-lexical-analysis" aria-label="Permalink to &quot;词法分析 (Lexical Analysis)&quot;">​</a></h4><p>词法分析用以将代码转化为 Token 流，维护一个关于 Token 的数组 词法分析后的 Token 流也有诸多应用，如:</p><ul><li>代码检查，如 eslint 判断是否以分号结尾，判断是否含有分号的 token</li><li>语法高亮，如 highlight/prism 使之代码高亮</li><li>模板语法，如 ejs 等模板也离不开</li></ul><h4 id="语法分析-syntactic-analysis" tabindex="-1">语法分析 (Syntactic Analysis) <a class="header-anchor" href="#语法分析-syntactic-analysis" aria-label="Permalink to &quot;语法分析 (Syntactic Analysis)&quot;">​</a></h4><p>语法分析将 Token 流转化为结构化的 AST，方便操作</p>',14),s=[r];function n(o,c,h,p,S,d){return t(),a("div",null,s)}const _=e(i,[["render",n]]);export{T as __pageData,_ as default};

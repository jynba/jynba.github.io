import{_ as i,c as s,o as a,a5 as e}from"./chunks/framework.CByBVyi2.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"timeline/issue-66.md","filePath":"timeline/issue-66.md","lastUpdated":1744193097000}'),l={name:"timeline/issue-66.md"},t=e(`<blockquote><p>Git 子模块（Git Submodule）是一个 Git 仓库嵌套在另一个 Git 仓库中的机制。这使得你可以将一个 Git 仓库作为另一个 Git 仓库的子目录，并能够独立地管理它们。Git 子模块通常用于包含外部依赖库或其他项目，这些依赖库或项目的版本需要独立管理。</p></blockquote><div class="tip custom-block"><p class="custom-block-title">原文地址</p><p><a href="https://github.com/jynba/jynba.github.io/issues/66" target="_blank" rel="noreferrer">Git Submodule是什么？如何使用？ | GitHub</a></p></div><ul><li>通俗易懂大白话： 子模块是独立git仓库，在主项目中copy了一份在submodule目录便于在项目中引用，保存着某次commit版本，可以同步更新；可以同步推到远程仓库</li></ul><h3 id="git-子模块-git-submodule-的基础概念" tabindex="-1">Git 子模块（Git Submodule）的基础概念 <a class="header-anchor" href="#git-子模块-git-submodule-的基础概念" aria-label="Permalink to &quot;Git 子模块（Git Submodule）的基础概念&quot;">​</a></h3><ul><li>子模块（Submodule）：是一个 Git 仓库，它作为另一个 Git 仓库的子目录存在。子模块通常用于包含和管理外部库或项目，特别是在需要引用一个特定版本的情况下。</li><li>独立版本控制：子模块本身是一个独立的 Git 仓库，具有独立的提交历史和分支。它只是在主项目中作为一个目录存在。</li><li>子模块的引用：主项目中的子模块不会直接包含其源代码，而是仅保存子模块引用的某个特定 commit 哈希。</li></ul><h3 id="如何开始一个子模块" tabindex="-1">如何开始一个子模块 <a class="header-anchor" href="#如何开始一个子模块" aria-label="Permalink to &quot;如何开始一个子模块&quot;">​</a></h3><ul><li><p>添加子模块：你可以通过 git submodule add 命令将外部仓库作为子模块添加到当前仓库。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> submodule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">repository-ur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">path/to/submodul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>&lt;repository-url&gt;</code>：子模块仓库的 URL 地址。</li><li><code>&lt;path/to/submodule&gt;</code>：子模块在主项目中的路径，通常是你希望将其放置的位置。 例如，添加一个 GitHub 上的开源库作为子模块：</li></ul><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> submodule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/example/repo.git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libs/repo</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">这样会在当前</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 仓库的</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libs/repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 目录下创建一个子模块。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>初始化和更新子模块：添加子模块后，需要初始化子模块并拉取它的内容。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> submodule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --init</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>--init：初始化所有子模块（在第一次克隆或添加子模块时需要）。</li><li>--recursive：初始化并更新嵌套的子模块（如果子模块本身也有子模块）。</li></ul></li><li><p>查看子模块状态：可以使用 git submodule status：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> submodule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1234567890abcdef1234567890abcdef12345678</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libs/repo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (heads/main)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>该命令会显示子模块的当前 commit 哈希、路径以及子模块是否有任何变更。</p></li></ul><h3 id="子模块的优缺点" tabindex="-1">子模块的优缺点 <a class="header-anchor" href="#子模块的优缺点" aria-label="Permalink to &quot;子模块的优缺点&quot;">​</a></h3><h4 id="优点" tabindex="-1">优点： <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点：&quot;">​</a></h4><ul><li>模块化管理：子模块允许你将一个大项目分解为多个小项目，每个小项目都可以独立管理版本。</li><li>代码复用：你可以将常用的库作为子模块引入多个项目，避免重复开发和维护。</li><li>精确版本控制：你可以确保主项目引用的是子模块的某个特定版本，而不是一直同步到最新的提交。</li></ul><h4 id="缺点" tabindex="-1">缺点： <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点：&quot;">​</a></h4><ul><li>管理复杂性：子模块增加了项目的管理复杂性，尤其是在多人协作的环境下，团队成员需要特别注意如何更新、初始化子模块。</li><li>操作不便：子模块的更新和切换通常比普通的 Git 操作要复杂，需要手动处理子模块的版本。</li><li>依赖问题：如果子模块的外部依赖发生了变化（如子模块删除或迁移），可能需要额外的工作来处理这些变化。</li></ul>`,12),n=[t];function h(p,d,r,o,k,u){return a(),s("div",null,n)}const g=i(l,[["render",h]]);export{b as __pageData,g as default};

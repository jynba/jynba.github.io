import{_ as e,c as t,o as a,a5 as i}from"./chunks/framework.CByBVyi2.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"timeline/issue-29.md","filePath":"timeline/issue-29.md","lastUpdated":1750324370000}'),o={name:"timeline/issue-29.md"},r=i('<p>Vue3.0的几个亮点：</p><div class="tip custom-block"><p class="custom-block-title">原文地址</p><p><a href="https://github.com/jynba/jynba.github.io/issues/29" target="_blank" rel="noreferrer">vue3主要的亮点功能 | GitHub</a></p></div><p>○ Performance：性能优化 ○ Tree-shaking support：支持摇树优化 ○ Composition API：组合API ○ Fragment，Teleport，Suspense：新增的组件 ○ Better TypeScript support：更好的TypeScript支持 ○ Custom Renderer API：自定义渲染器</p><h3 id="组合式api" tabindex="-1">组合式API <a class="header-anchor" href="#组合式api" aria-label="Permalink to &quot;组合式API&quot;">​</a></h3><ol><li>更好地支持typeScript（函数集中统一setup管理、便于类型推断、逻辑组织）</li><li>可以按需导入和使用功能，只导入你实际需要的 Composition 函数，更容易进行静态分析，更好地支持treeshaking</li></ol><h3 id="更强的虚拟dom渲染" tabindex="-1">更强的虚拟DOM渲染 <a class="header-anchor" href="#更强的虚拟dom渲染" aria-label="Permalink to &quot;更强的虚拟DOM渲染&quot;">​</a></h3><blockquote><p>Vue 3 的虚拟 DOM 渲染性能更高效，具有更好的响应性能。</p></blockquote><ul><li>快速diff算法</li></ul><h3 id="响应式的改进" tabindex="-1">响应式的改进 <a class="header-anchor" href="#响应式的改进" aria-label="Permalink to &quot;响应式的改进&quot;">​</a></h3><ul><li><p>什么是响应式？</p></li><li><p>响应式原理：数据更新时，自动调用依赖该数据的函数</p></li></ul><blockquote><p>背景：vue2的响应式缺陷 1.监听数组变化下存在性能问题 2.Object.defineProperty只能劫持对象的属性，并且针对新增的data状态，无法劫持到，只能通过vue的扩展方法$set进行处理</p></blockquote><ul><li><p>Vue3的改进</p></li><li><p>proxy是ES6新增的特性，proxy作为一个代理对象去代理目标对象，修改Proxy对象进行的绝大部分操作，包括get set in new 都可以在第二个参数handler中配置拦截。 其中也包括了<strong>新增</strong></p></li></ul><ol><li><p>使用effect函数做dom的更新操作</p></li><li><p>使用track函数收集依赖于某个变量的所有effect函数，放在dep的Set集合中（在proxy的get拦截触发时）</p></li><li><p>执行trigger通知dep里所有的effect执行。 （在proxy的set拦截触发时）</p></li></ol><ul><li>mutiObj(weakMap) -&gt; obj(MAP) -&gt; prop：dep(Set) -&gt; effect</li></ul><blockquote><p>weakMap key为对象，当不再存在对键的引用时，键值对将自动被垃圾回收</p></blockquote><p><img src="https://github.com/jynba/jynba.github.io/assets/75623303/260912c2-f73c-4b24-ba8e-4367029abdaf" alt="image"><a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=10&amp;vd_source=c876f3bd0c62aa63208a51b6cfb2d8b9" target="_blank" rel="noreferrer">图片来源</a></p><h3 id="更好的支持treeshaking" tabindex="-1">更好的支持treeshaking <a class="header-anchor" href="#更好的支持treeshaking" aria-label="Permalink to &quot;更好的支持treeshaking&quot;">​</a></h3><ul><li>Vue 3 改进了静态分析和模板编译，提供了更小的包体积；且组合式API更适合treeShaking；通过import 和 export 语句，用来检测代码模块是否被导出、导入，且被 JavaScript 文件使用</li></ul><blockquote><p>treeshaking依赖于` ES 中的静态编译，通过 AST 将用不到的函数进行移除，从而减小打包体积</p></blockquote>',19),l=[r];function p(s,c,n,u,d,h){return a(),t("div",null,l)}const f=e(o,[["render",p]]);export{m as __pageData,f as default};

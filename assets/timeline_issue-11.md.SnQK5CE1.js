import{_ as e,c as s,o as a,a5 as t}from"./chunks/framework.CByBVyi2.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"timeline/issue-11.md","filePath":"timeline/issue-11.md","lastUpdated":1753669190000}'),i={name:"timeline/issue-11.md"},l=t(`<h2 id="cjs-commonjs" tabindex="-1">cjs (commonjs) <a class="header-anchor" href="#cjs-commonjs" aria-label="Permalink to &quot;cjs (commonjs)&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">原文地址</p><p><a href="https://github.com/jynba/jynba.github.io/issues/11" target="_blank" rel="noreferrer">前端打包时的cjs、es、umd文件的区别 | GitHub</a></p></div><ul><li><p>commonjs 是 Node 中的模块规范，通过 require 及 exports 进行导入导出 (进一步延伸的话，module.exports 属于 commonjs2)</p></li><li><p>同时，webpack 也对 cjs 模块得以解析，因此 cjs 模块可以运行在 node 环境及 webpack 环境下的，但不能在浏览器中直接使用。但如果你写前端项目在 webpack 中，也可以理解为它在浏览器和 Node 都支持。</p></li></ul><h2 id="esm-es-module" tabindex="-1">esm (es module) <a class="header-anchor" href="#esm-es-module" aria-label="Permalink to &quot;esm (es module)&quot;">​</a></h2><ul><li><p>esm 是 tc39 对于 ESMAScript 的模块话规范，正因是语言层规范，因此在 Node 及 浏览器中均会支持。</p></li><li><p>esm 为静态导入，正因如此，可在编译期进行 Tree Shaking，减少 js 体积。如果需要动态导入，tc39 为动态加载模块定义了 API: import(module) 。可将以下代码粘贴到控制台执行</p></li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const ms = await import(&quot;https://cdn.skypack.dev/ms@latest&quot;);</span></span>
<span class="line"><span>ms.default(1000);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>esm 是未来的趋势，目前一些 CDN 厂商，前端构建工具均致力于 cjs 模块向 esm 的转化，比如 skypack、 snowpack、vite 等。</p><h3 id="主要区别" tabindex="-1">主要区别 <a class="header-anchor" href="#主要区别" aria-label="Permalink to &quot;主要区别&quot;">​</a></h3><ol><li>cjs浏览器不支持，esm浏览器支持</li><li>cjs 模块输出的是一个值的拷贝，esm 输出的是值的引用</li><li>cjs 模块是运行时加载，esm 是编译时加载</li></ol><h2 id="umd" tabindex="-1">umd <a class="header-anchor" href="#umd" aria-label="Permalink to &quot;umd&quot;">​</a></h2><ul><li>一种兼容 cjs 与 amd 的模块，既可以在 node/webpack 环境中被 require 引用，也可以在浏览器中直接用 CDN 被 script.src 引入。</li></ul>`,11),o=[l];function n(c,r,m,p,d,u){return a(),s("div",null,o)}const _=e(i,[["render",n]]);export{b as __pageData,_ as default};

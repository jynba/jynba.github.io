import{_ as s,c as a,o as i,a5 as n}from"./chunks/framework.CByBVyi2.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"timeline/issue-81.md","filePath":"timeline/issue-81.md","lastUpdated":1753089386000}'),l={name:"timeline/issue-81.md"},e=n(`<blockquote><p>当你使用第三方包，却发现包中存在一个需要改动的地方影响自己项目的使用，如何不直接修改 node_modules 里的第三方包，而是在自己的项目代码中修复/绕过问题？</p></blockquote><div class="tip custom-block"><p class="custom-block-title">原文地址</p><p><a href="https://github.com/jynba/jynba.github.io/issues/81" target="_blank" rel="noreferrer">使用patch-package给npm包打补丁 | GitHub</a></p></div><h3 id="解决方法" tabindex="-1">解决方法 <a class="header-anchor" href="#解决方法" aria-label="Permalink to &quot;解决方法&quot;">​</a></h3><ul><li>用 <a href="https://www.npmjs.com/package/patch-package" target="_blank" rel="noreferrer">patch-package</a> 工具修复 node_modules/@xxx/xxxx.js 的详细步骤。这样你不用每次手动改 node_modules，升级依赖后也能自动修复。</li><li>postinstall 是 npm 或 yarn 安装脚本的一部分，它在依赖安装完成后自动执行。通过在 package.json 中添加 postinstall 脚本，我们可以在依赖安装完成后自动执行一些自定义操作</li></ul><h3 id="操作步骤" tabindex="-1">操作步骤 <a class="header-anchor" href="#操作步骤" aria-label="Permalink to &quot;操作步骤&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 步骤一：安装 patch-package</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm install patch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> postinstall</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">postinstall </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">save</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 步骤二：修改 node_modules 里的对应的文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 步骤三：生成 patch (此处我修复的是figma-export库)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npx patch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @figma</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cli </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这会在你的项目根目录下生成 patches/@figma-export+cli*.patch 文件; .patch文件就是git diff记录描述，原理：patch-package会将当前node_modules下的源码与原始源码进行git diff，并在项目根目录下生成一个patch补丁文件。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 步骤四：自动应用 patch</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 package.json 里加上：</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;postinstall&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;patch-package&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这样每次 npm install 后都会自动应用补丁。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li>只需手动改一次 node_modules，然后生成 patch。</li><li>以后只要有 patch 文件在，npm install 后会自动修复，无需重复手动操作。</li><li>这种方式不会污染你的源代码仓库，只会多一个 patches/ 目录和一条脚本。</li></ul>`,8),p=[e];function t(h,r,k,c,d,o){return i(),a("div",null,p)}const b=s(l,[["render",t]]);export{g as __pageData,b as default};

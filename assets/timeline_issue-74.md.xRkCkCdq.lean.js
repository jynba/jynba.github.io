import{_ as e,c as t,o,a5 as i}from"./chunks/framework.CByBVyi2.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"timeline/issue-74.md","filePath":"timeline/issue-74.md","lastUpdated":1753669190000}'),a={name:"timeline/issue-74.md"},r=i('<blockquote><p>在Vite中我经常能看到import.meta，他到底是啥东西呢？是Vite特有的吗？他有哪些方法，又有什么作用呢？</p></blockquote><div class="tip custom-block"><p class="custom-block-title">原文地址</p><p><a href="https://github.com/jynba/jynba.github.io/issues/74" target="_blank" rel="noreferrer">import.meta是什么？vite中有哪些import.meta特性? | GitHub</a></p></div><p>参考文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/import.meta" target="_blank" rel="noreferrer">MDN</a></p><h3 id="import-meta是什么" tabindex="-1">import.meta是什么? <a class="header-anchor" href="#import-meta是什么" aria-label="Permalink to &quot;import.meta是什么?&quot;">​</a></h3><p>import.meta 是一个宿主环境创建的可扩展的 <a href="https://github.com/jynba/jynba.github.io/issues/72" target="_blank" rel="noreferrer">null 原型对象</a> (详情见上一篇文章)，其所有属性均可写、可配置、可枚举(没有prototype )。</p><ul><li><p><code>url</code> 到此模块的完整 URL，包括查询参数和片段标识符（在 ? 和 # 之后）。在浏览器中，它是可获取此脚本的 URL（对外部脚本）或者是包含此脚本的文档的 URL（对内联脚本）。在 Node.js 中，它是文件路径（包括 <code>file://</code> 协议部分）。</p></li><li><p><code>resolve</code> 将一个模块的标识符解析为相对于当前模块的 URL。</p></li><li><p>简而言之：<code>import.meta</code>必须在模块中使用，使用场景：</p></li></ul><ol><li>在 HTML 中的 <code>&lt;script&gt;</code> 标签上添加 <code>type=&quot;module&quot;</code> 属性(浏览器虽然是V8引擎也有ESM，但需要使用 <code>&lt;script type=&quot;module&quot;&gt; </code>来识别模块)</li><li>在<code>NodeJS</code>中</li><li>在<code>Vite</code>中</li></ol><h3 id="vite中有哪些import-meta特性-有什么作用" tabindex="-1">Vite中有哪些import.meta特性，有什么作用? <a class="header-anchor" href="#vite中有哪些import-meta特性-有什么作用" aria-label="Permalink to &quot;Vite中有哪些import.meta特性，有什么作用?&quot;">​</a></h3><ul><li>在 Vite 中，<code>import.meta</code> 除了支持标准的<code>import.meta.url</code> 之外，还扩展了很多特性</li></ul><p><code>import.meta.env</code>：访问环境变量。</p><p><code>import.meta.hot</code>：支持热模块替换（<code>HMR</code>）。</p><p><code>import.meta.resolve</code>：解析模块路径（<code>Node.js</code> 环境中可用）。</p><p><code>import.meta.url</code>：获取当前模块的 <code>URL</code>(ESM自带)。</p><p><code>import.meta.glob</code>：批量动态导入模块。</p><p><code>import.meta.globEager</code>：同步批量导入模块。(已经弃用，使用<code>import.meta.glob(&#39;*&#39;, { eager: true })</code>来代替)</p>',15),c=[r];function p(d,l,m,s,n,u){return o(),t("div",null,c)}const f=e(a,[["render",p]]);export{b as __pageData,f as default};

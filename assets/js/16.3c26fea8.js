(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{530:function(n,t,e){n.exports=e.p+"assets/img/copy1.024d7585.png"},531:function(n,t,e){n.exports=e.p+"assets/img/copy2.965c651a.png"},594:function(n,t,e){"use strict";e.r(t);var a=e(3),s=Object(a.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[n._v("#")]),n._v(" 前言：")]),n._v(" "),a("p",[n._v("前面我"),a("RouterLink",{attrs:{to:"/blogs/java/tips/this.html"}},[n._v("前一篇文章")]),n._v("中谈到了clone（浅拷贝），另外关于克隆网上也有很多的写过这方面的问题。\n我在这里记录一下我遇到的问题和使用clone的方法。")],1),n._v(" "),a("h1",{attrs:{id:"知识点一-什么是浅拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#知识点一-什么是浅拷贝"}},[n._v("#")]),n._v(" 知识点一：什么是浅拷贝？")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("我们这里说的浅拷贝是指我们拷贝出来的对象*内部的引用类型变量和*原来对象内部引用类型变量是同一引用（指向同一对象）。\n但是我们拷贝出来的对象和新对象不是同一对象。\n简单来说，新（拷贝产生）、旧（元对象）对象不同，但是内部如果有引用类型的变量，新、旧对象引用的都是同一引用。\n")])])]),a("h1",{attrs:{id:"知识点二-什么是深拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#知识点二-什么是深拷贝"}},[n._v("#")]),n._v(" 知识点二：什么是深拷贝？")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("深拷贝：全部拷贝原对象的内容，*包括内存的引用类型也进行拷贝\n")])])]),a("h1",{attrs:{id:"知识点三、java拷贝-clone-的前提"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#知识点三、java拷贝-clone-的前提"}},[n._v("#")]),n._v(" 知识点三、java拷贝（clone）的前提：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("1.首先我们需要知道Object类中一个clone()的方法，并且是protected关键字修饰的本地方法(使用native关键字修饰)，我们完成克隆需要重写该方法。\n注意：按照惯例重写的时候一个要将protected修饰符修改为public，这是JDK所推荐的做法，但是我测试了一下，\n复写的时候不修改为public也是能够完成拷贝的。但是还是推荐写成public。\n\n2.我们重写的clone方法一个要实现Cloneable接口。虽然这个接口并没有什么方法，但是必须实现该标志接口。\n如果不实现将会在运行期间抛出：CloneNotSupportedException异常\n\n3.Object中本地clone()方法，默认是浅拷贝\n")])])]),a("h1",{attrs:{id:"浅拷贝案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浅拷贝案例"}},[n._v("#")]),n._v(" 浅拷贝案例")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("public class Person implements Cloneable{\nprivate String name;\nprivate int age;\nprivate int[] ints;\n\npublic int[] getInts() {\n    return ints;\n}\n\npublic Person(String name, int age, int[] ints) {\n    this.name = name;\n    this.age = age;\n    this.ints = ints;\n}\n\npublic void setInts(int[] ints) {\n    this.ints = ints;\n}\n\npublic String getName() {\n    return name;\n}\n\npublic void setName(String name) {\n    this.name = name;\n}\n\npublic int getAge() {\n    return age;\n}\n\npublic void setAge(int age) {\n    this.age = age;\n}\n\npublic Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n}\n\n/**\n *  默认实现\n * */\n@Override\npublic Object clone() throws CloneNotSupportedException {\n\n\n    return  super.clone();\n}\n}\n")])])]),a("p",[a("img",{attrs:{src:e(530),alt:"Image text"}})]),n._v(" "),a("h1",{attrs:{id:"深拷贝案例-clone-内代码有不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝案例-clone-内代码有不同"}},[n._v("#")]),n._v(" 深拷贝案例（clone()内代码有不同）")]),n._v(" "),a("hr"),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("public class Person implements Cloneable{\n    private String name;\n    private int age;\n    private int[] ints;\n\n    public int[] getInts() {\n        return ints;\n    }\n\n    public Person(String name, int age, int[] ints) {\n        this.name = name;\n        this.age = age;\n        this.ints = ints;\n    }\n\n    public void setInts(int[] ints) {\n        this.ints = ints;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    /**\n    *  深拷贝\n    * */\n    @Override\n    public Object clone() throws CloneNotSupportedException {\n        Person person = new Person(name,age);\n        int[] ints = new int[this.ints.length];\n        System.arraycopy(this.ints,0,ints,0,ints.length);\n        person.setInts(ints);\n\n        return  person;\n    }\n}\n")])])]),a("hr"),n._v(" "),a("p",[a("img",{attrs:{src:e(531),alt:"Image text"}})]),n._v(" "),a("h1",{attrs:{id:"总结-说人话系列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结-说人话系列"}},[n._v("#")]),n._v(" 总结（说人话系列）")]),n._v(" "),a("ul",[a("li",[n._v("浅拷贝时只拷贝了对象，但内部数据类型还是引用原来的类。"),a("strong",[n._v("覆写Object clone(){return super.clone()}")])]),n._v(" "),a("li",[n._v("深拷贝时不只拷贝了对象，还拷贝了内部数据类型。"),a("strong",[n._v("覆写Object clone(){new相应的数据类型[this.ints.length]arraycopy...和对象 return person}")])]),n._v(" "),a("li",[n._v("注意：\n1.一定要实现Cloneable接口\n2.复写clone()方法，注意：默认是浅拷贝，这里需要将引用类型进行深拷贝处理\n3.特殊：String类虽然是引用类型，但是是final类，同时也有字符串常量池的存在，不必进行处理\n"),a("br"),a("br"),n._v("\n          转载自csdn文章 "),a("a",{attrs:{href:"https://blog.csdn.net/xinghuo0007/article/details/78896726",target:"_blank",rel:"noopener noreferrer"}},[n._v("原文大佬博客"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=s.exports}}]);